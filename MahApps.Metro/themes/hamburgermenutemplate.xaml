<?xml version="1.0" encoding="utf-8"?>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:Controls="clr-namespace:MahApps.Metro.Controls" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:options="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" xmlns:system="clr-namespace:System;assembly=mscorlib">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.Buttons.xaml" />
    <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.ListBox.xaml" />
    <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.Scrollbars.xaml" />
  </ResourceDictionary.MergedDictionaries>
  <system:Double x:Key="HamburgerMenuSelectionIndicatorThemeWidth">6</system:Double>
  <system:Double x:Key="HamburgerMenuSelectionIndicatorThemeHeight">24</system:Double>
  <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
  <Style x:Key="HamburgerButtonStyle" BasedOn="{StaticResource ChromelessButtonStyle}" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="{DynamicResource BlackBrush}" />
    <Setter Property="Control.BorderThickness" Value="0" />
    <Setter Property="FrameworkElement.Margin" Value="0" />
    <Setter Property="Control.Padding" Value="0" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Grid Background="#00FFFFFF">
            <Grid Name="PART_Background" Background="{TemplateBinding Control.Background}" Opacity="0" />
            <ContentPresenter Name="PART_ContentPresenter" Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Opacity="0.75" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="PART_Background" Property="UIElement.Opacity" Value="0.3" />
              <Setter TargetName="PART_ContentPresenter" Property="UIElement.Opacity" Value="1" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="False">
              <Setter TargetName="PART_Background" Property="UIElement.Opacity" Value="0" />
              <Setter TargetName="PART_ContentPresenter" Property="UIElement.Opacity" Value="0.75" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Property="Control.Foreground" Value="#FFADADAD" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
  </Style>
  <QuinticEase x:Key="ScrollBarEaseInOut" EasingMode="EaseInOut" />
  <Style x:Key="HamburgerScrollViewerStyle" BasedOn="{StaticResource MetroScrollViewer}" TargetType="{x:Type ScrollViewer}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid Name="Grid" Background="{TemplateBinding Control.Background}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Name="leftColumn" Width="*" />
              <ColumnDefinition Name="rightColumn" Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ScrollContentPresenter Name="PART_ScrollContentPresenter" Grid.Row="0" Grid.Column="0" Margin="{TemplateBinding Control.Padding}" CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" Content="{TemplateBinding ContentControl.Content}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" />
            <ScrollBar Name="PART_VerticalScrollBar" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" HorizontalAlignment="Right" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}" Minimum="0" Opacity="0" ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}" Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <ScrollBar Name="PART_HorizontalScrollBar" Grid.Row="0" Grid.RowSpan="2" Grid.Column="0" VerticalAlignment="Bottom" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}" Minimum="0" Opacity="0" Orientation="Horizontal" ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}" Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Controls:ScrollViewerHelper.VerticalScrollBarOnLeftSide" Value="True">
              <Setter TargetName="PART_HorizontalScrollBar" Property="Grid.Column" Value="1" />
              <Setter TargetName="PART_ScrollContentPresenter" Property="Grid.Column" Value="1" />
              <Setter TargetName="PART_VerticalScrollBar" Property="FrameworkElement.HorizontalAlignment" Value="Left" />
              <Setter TargetName="leftColumn" Property="ColumnDefinition.Width" Value="Auto" />
              <Setter TargetName="rightColumn" Property="ColumnDefinition.Width" Value="*" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsVisible}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ComputedVerticalScrollBarVisibility}" Value="Visible" />
                <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Controls:SplitView}}, Path=IsPaneOpen}" Value="True" />
              </MultiDataTrigger.Conditions>
              <MultiDataTrigger.EnterActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation EasingFunction="{StaticResource ScrollBarEaseInOut}" Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2" />
                    <DoubleAnimation EasingFunction="{StaticResource ScrollBarEaseInOut}" Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2" />
                  </Storyboard>
                </BeginStoryboard>
              </MultiDataTrigger.EnterActions>
              <MultiDataTrigger.ExitActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation BeginTime="0:0:1" EasingFunction="{StaticResource ScrollBarEaseInOut}" Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                    <DoubleAnimation BeginTime="0:0:1" EasingFunction="{StaticResource ScrollBarEaseInOut}" Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                  </Storyboard>
                </BeginStoryboard>
              </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="HamburgerMenuItemFocusVisualTemplate">
    <Rectangle SnapsToDevicePixels="True" Stroke="#FF000000" StrokeThickness="2" UseLayoutRounding="True" />
  </ControlTemplate>
  <Style x:Key="HamburgerMenuItemStyle" BasedOn="{StaticResource MetroListBoxItem}" TargetType="{x:Type ListBoxItem}">
    <Setter Property="Control.Background" Value="#00FFFFFF" />
    <Setter Property="Control.BorderThickness" Value="0" />
    <Setter Property="Controls:ItemHelper.SelectedBackgroundBrush" Value="{DynamicResource AccentColorBrush}" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Controls:HamburgerMenu}}, Path=ItemFocusVisualStyle, Mode=OneWay, FallbackValue={x:Null}}" />
    <Setter Property="Control.Foreground" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}, Path=Foreground, Mode=OneWay}" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="UIElement.IsEnabled" Value="{Binding IsEnabled, Mode=OneWay, FallbackValue=true}" />
    <Setter Property="Control.IsTabStop" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Controls:HamburgerMenu}}, Path=IsTabStop, Mode=OneWay, FallbackValue=True}" />
    <Setter Property="FrameworkElement.Margin" Value="0" />
    <Setter Property="FrameworkElement.MinHeight" Value="0" />
    <Setter Property="Control.Padding" Value="0" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Grid Background="{TemplateBinding Control.Background}" RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}">
            <Border Name="Border" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
            <Grid Margin="{TemplateBinding Control.BorderThickness}">
              <Grid HorizontalAlignment="Left" VerticalAlignment="Center" Visibility="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Controls:HamburgerMenu}}, Path=ShowSelectionIndicator, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}">
                <Rectangle Name="SelectionIndicator" Width="{DynamicResource HamburgerMenuSelectionIndicatorThemeWidth}" Height="{DynamicResource HamburgerMenuSelectionIndicatorThemeHeight}" Fill="{TemplateBinding Control.Foreground}" Focusable="False" Opacity="0.0" />
              </Grid>
              <ContentPresenter Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ListBoxItem.IsSelected" Value="True">
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.SelectedForegroundBrush), Mode=OneWay}" Property="Control.Foreground" />
              <Setter TargetName="Border" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ItemHelper.SelectedBackgroundBrush), Mode=OneWay}" Property="Border.Background" />
              <Setter TargetName="SelectionIndicator" Property="UIElement.Opacity" Value="1.0" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
                <Condition Property="Selector.IsSelectionActive" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.ActiveSelectionForegroundBrush), Mode=OneWay}" Property="Control.Foreground" />
              <Setter TargetName="Border" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ItemHelper.ActiveSelectionBackgroundBrush), Mode=OneWay}" Property="Border.Background" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="True" />
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ItemHelper.HoverSelectedBackgroundBrush), Mode=OneWay}" Property="Border.Background" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="True" />
                <Condition Property="ListBoxItem.IsSelected" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ItemHelper.HoverBackgroundBrush), Mode=OneWay}" Property="Border.Background" />
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.DisabledForegroundBrush), Mode=OneWay}" Property="Control.Foreground" />
              <Setter TargetName="Border" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.DisabledBackgroundBrush), Mode=OneWay}" Property="Border.Background" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsEnabled" Value="False" />
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.DisabledSelectedForegroundBrush), Mode=OneWay}" Property="Control.Foreground" />
              <Setter TargetName="Border" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.DisabledSelectedBackgroundBrush), Mode=OneWay}" Property="Border.Background" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.VerticalContentAlignment" Value="Stretch" />
  </Style>
  <Style x:Key="HamburgerListBoxItemStyle" BasedOn="{StaticResource HamburgerMenuItemStyle}" TargetType="{x:Type ListBoxItem}" />
  <Style x:Key="HamburgerMenuListStyle" BasedOn="{StaticResource MetroListBox}" TargetType="{x:Type ListBox}">
    <Setter Property="Control.Background" Value="#00FFFFFF" />
    <Setter Property="Control.BorderThickness" Value="0" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBox}">
          <Border Name="Border" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
            <ScrollViewer Padding="{TemplateBinding Control.Padding}" Controls:ScrollViewerHelper.VerticalScrollBarOnLeftSide="{TemplateBinding Controls:ScrollViewerHelper.VerticalScrollBarOnLeftSide}" ScrollViewer.CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" Focusable="False" ScrollViewer.HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Style="{StaticResource HamburgerScrollViewerStyle}" ScrollViewer.VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
              <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
            </ScrollViewer>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.IsGrouping" Value="False">
              <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VirtualizingPanel.IsVirtualizing" Value="False" />
  </Style>
  <Style x:Key="HamburgerListBoxStyle" BasedOn="{StaticResource HamburgerMenuListStyle}" TargetType="{x:Type ListBox}" />
  <ControlTemplate x:Key="HamburgerMenuTemplate" TargetType="{x:Type Controls:HamburgerMenu}">
    <Grid>
      <Controls:SplitView x:Name="MainSplitView" CompactPaneLength="{TemplateBinding Controls:HamburgerMenu.CompactPaneLength}" DisplayMode="{TemplateBinding Controls:HamburgerMenu.DisplayMode}" IsTabStop="False" OpenPaneLength="{TemplateBinding Controls:HamburgerMenu.OpenPaneLength}" PaneBackground="{TemplateBinding Controls:HamburgerMenu.PaneBackground}" PaneForeground="{TemplateBinding Controls:HamburgerMenu.PaneForeground}" PanePlacement="{TemplateBinding Controls:HamburgerMenu.PanePlacement}" IsPaneOpen="{Binding IsPaneOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
        <Controls:SplitView.Pane>
          <Grid Name="PaneGrid">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <DockPanel Name="PaneHeader" Grid.Row="0" Height="{TemplateBinding Controls:HamburgerMenu.HamburgerHeight}" Margin="0 0 0 8" LastChildFill="True">
              <Grid Name="PaneHeaderGap" Width="{TemplateBinding Controls:HamburgerMenu.HamburgerWidth}" DockPanel.Dock="Left" />
              <ContentControl Name="PaneHeaderContent" ContentTemplate="{TemplateBinding Controls:HamburgerMenu.HamburgerMenuHeaderTemplate}" IsTabStop="False" />
            </DockPanel>
            <ListBox Name="ButtonsListView" Grid.Row="1" Width="{TemplateBinding Controls:HamburgerMenu.OpenPaneLength}" Controls:ScrollViewerHelper.VerticalScrollBarOnLeftSide="{TemplateBinding Controls:HamburgerMenu.VerticalScrollBarOnLeftSide}" AutomationProperties.Name="Menu items" Foreground="{TemplateBinding Controls:HamburgerMenu.PaneForeground}" ItemContainerStyle="{TemplateBinding Controls:HamburgerMenu.ItemContainerStyle}" ItemTemplate="{TemplateBinding Controls:HamburgerMenu.ItemTemplate}" ItemTemplateSelector="{TemplateBinding Controls:HamburgerMenu.ItemTemplateSelector}" ItemsSource="{TemplateBinding Controls:HamburgerMenu.ItemsSource}" ScrollViewer.VerticalScrollBarVisibility="Auto" SelectionMode="Single" Style="{StaticResource HamburgerMenuListStyle}" TabIndex="1" SelectedIndex="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedIndex, Mode=TwoWay}" SelectedItem="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedItem, Mode=TwoWay}" />
            <ListBox Name="OptionsListView" Grid.Row="2" Width="{TemplateBinding Controls:HamburgerMenu.OpenPaneLength}" Margin="0 20 0 8" VerticalAlignment="Bottom" AutomationProperties.Name="Option items" Foreground="{TemplateBinding Controls:HamburgerMenu.PaneForeground}" ItemContainerStyle="{TemplateBinding Controls:HamburgerMenu.OptionsItemContainerStyle}" ItemTemplate="{TemplateBinding Controls:HamburgerMenu.OptionsItemTemplate}" ItemTemplateSelector="{TemplateBinding Controls:HamburgerMenu.OptionsItemTemplateSelector}" ItemsSource="{TemplateBinding Controls:HamburgerMenu.OptionsItemsSource}" ScrollViewer.VerticalScrollBarVisibility="Disabled" SelectionMode="Single" Style="{StaticResource HamburgerMenuListStyle}" TabIndex="2" SelectedIndex="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedOptionsIndex, Mode=TwoWay}" SelectedItem="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedOptionsItem, Mode=TwoWay}" />
          </Grid>
        </Controls:SplitView.Pane>
        <Controls:TransitioningContentControl x:Name="ContentPart" Padding="{TemplateBinding Control.Padding}" HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" x:AutomationProperties.Name="Content" Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" RestartTransitionOnContentChange="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Transition="{TemplateBinding Controls:HamburgerMenu.ContentTransition}" />
      </Controls:SplitView>
      <Button Name="HamburgerButton" Width="{TemplateBinding Controls:HamburgerMenu.HamburgerWidth}" Height="{TemplateBinding Controls:HamburgerMenu.HamburgerHeight}" Margin="0 0 0 8" Padding="{TemplateBinding Controls:HamburgerMenu.HamburgerMargin}" HorizontalAlignment="Left" VerticalAlignment="Top" AutomationProperties.Name="Main button" ContentTemplate="{TemplateBinding Controls:HamburgerMenu.HamburgerMenuTemplate}" Foreground="{TemplateBinding Controls:HamburgerMenu.PaneForeground}" IsTabStop="{TemplateBinding Control.IsTabStop}" Style="{StaticResource HamburgerButtonStyle}" TabIndex="0" Visibility="{TemplateBinding Controls:HamburgerMenu.HamburgerVisibility}" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="Controls:HamburgerMenu.PanePlacement" Value="Right">
        <Setter TargetName="HamburgerButton" Property="FrameworkElement.HorizontalAlignment" Value="Right" />
        <Setter TargetName="PaneHeaderGap" Property="DockPanel.Dock" Value="Right" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
</ResourceDictionary>
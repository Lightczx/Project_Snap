<?xml version="1.0" encoding="utf-8"?>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:Controls="clr-namespace:MahApps.Metro.Controls" xmlns:Converters="clr-namespace:MahApps.Metro.Converters">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.TextBox.xaml" />
  </ResourceDictionary.MergedDictionaries>
  <Thickness x:Key="ComboBoxBorderThemeThickness">1</Thickness>
  <Thickness x:Key="ComboBoxPopupBorderThemeThickness">1</Thickness>
  <Thickness x:Key="ComboBoxPopupBorderThemePadding">1</Thickness>
  <Style x:Key="EditableTextBoxStyle" BasedOn="{StaticResource MetroTextBox}" TargetType="{x:Type TextBox}">
    <Setter Property="FrameworkElement.MinHeight" Value="0" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="enterGotFocus">
              <DoubleAnimation Storyboard.TargetName="PART_Message" Storyboard.TargetProperty="Opacity" To=".2" Duration="0:0:0.2" />
            </Storyboard>
            <Storyboard x:Key="exitGotFocus">
              <DoubleAnimation Storyboard.TargetName="PART_Message" Storyboard.TargetProperty="Opacity" Duration="0:0:0.2" />
            </Storyboard>
            <Storyboard x:Key="enterHasText">
              <DoubleAnimation Storyboard.TargetName="PART_Message" Storyboard.TargetProperty="Opacity" From=".2" To="0" Duration="0:0:0.2" />
            </Storyboard>
            <Storyboard x:Key="exitHasText">
              <DoubleAnimation Storyboard.TargetName="PART_Message" Storyboard.TargetProperty="Opacity" Duration="0:0:0.2" />
            </Storyboard>
          </ControlTemplate.Resources>
          <Grid Background="{TemplateBinding Control.Background}">
            <Grid Name="PART_InnerGrid" Margin="{TemplateBinding Control.Padding}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Name="TextColumn" Width="*" />
                <ColumnDefinition Name="ButtonColumn" Width="Auto" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Name="ButtonRow" Height="*" />
              </Grid.RowDefinitions>
              <ScrollViewer Name="PART_ContentHost" Grid.Row="1" Grid.Column="0" Margin="0" VerticalAlignment="Stretch" BorderThickness="0" IsTabStop="False" Background="{x:Null}" />
              <TextBlock Name="PART_Message" Grid.Row="1" Grid.Column="0" Margin="3 0" Padding="{TemplateBinding Control.Padding}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" TextBlock.Foreground="{TemplateBinding Control.Foreground}" Style="{DynamicResource MahApps.Metro.Styles.MetroWatermarkTextBlock}" Text="{TemplateBinding Controls:TextBoxHelper.Watermark}" TextBlock.TextAlignment="{TemplateBinding Controls:TextBoxHelper.WatermarkAlignment}" TextTrimming="{TemplateBinding Controls:TextBoxHelper.WatermarkTrimming}" Visibility="Collapsed" />
              <ContentControl Name="PART_FloatingMessageContainer" Grid.Row="0" Grid.Column="0" Style="{DynamicResource FloatingMessageContainerStyle}">
                <ContentControl.Height>
                  <MultiBinding>
                    <MultiBinding.Converter>
                      <Converters:MathMultiplyConverter />
                    </MultiBinding.Converter>
                    <Binding ElementName="PART_FloatingMessage" Mode="OneWay" Path="ActualHeight" />
                    <Binding ElementName="PART_FloatingMessageContainer" Mode="OneWay" Path="Opacity" />
                  </MultiBinding>
                </ContentControl.Height>
                <TextBlock Name="PART_FloatingMessage" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" TextBlock.Foreground="{TemplateBinding Control.Foreground}" Style="{DynamicResource MetroAutoCollapsingTextBlock}" Text="{TemplateBinding Controls:TextBoxHelper.Watermark}" TextBlock.TextAlignment="{TemplateBinding Controls:TextBoxHelper.WatermarkAlignment}" TextTrimming="{TemplateBinding Controls:TextBoxHelper.WatermarkTrimming}">
                  <TextBlock.RenderTransform>
                    <TranslateTransform x:Name="FloatingMessageTransform">
                      <TranslateTransform.Y>
                        <MultiBinding>
                          <MultiBinding.Converter>
                            <Converters:MathSubtractConverter />
                          </MultiBinding.Converter>
                          <Binding ElementName="PART_FloatingMessage" Mode="OneWay" Path="ActualHeight" />
                          <Binding ElementName="PART_FloatingMessageContainer" Mode="OneWay" Path="ActualHeight" />
                        </MultiBinding>
                      </TranslateTransform.Y>
                    </TranslateTransform>
                  </TextBlock.RenderTransform>
                </TextBlock>
              </ContentControl>
              <Button Name="PART_ClearText" Grid.Row="0" Grid.RowSpan="2" Grid.Column="1" Width="{TemplateBinding Controls:TextBoxHelper.ButtonWidth}" Content="{TemplateBinding Controls:TextBoxHelper.ButtonContent}" ContentTemplate="{TemplateBinding Controls:TextBoxHelper.ButtonContentTemplate}" Focusable="False" FontFamily="{TemplateBinding Controls:TextBoxHelper.ButtonFontFamily}" FontSize="{TemplateBinding Controls:TextBoxHelper.ButtonFontSize}" Foreground="{TemplateBinding Control.Foreground}" IsTabStop="False" Style="{DynamicResource ChromelessButtonStyle}" Controls:TextBoxHelper.IsClearTextButtonBehaviorEnabled="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:TextBoxHelper.ClearTextButton), Mode=OneWay}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:TextBoxHelper.ClearTextButton), Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}" />
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <DataTrigger Value="" Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}">
              <Setter TargetName="PART_Message" Property="UIElement.Visibility" Value="Visible" />
            </DataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsVisible, RelativeSource={RelativeSource Self}}" Value="True" />
                <Condition Binding="{Binding Path=(Controls:TextBoxHelper.UseFloatingWatermark), RelativeSource={RelativeSource Self}}" Value="True" />
                <Condition Binding="{Binding Path=(Controls:TextBoxHelper.HasText), RelativeSource={RelativeSource Self}}" Value="True" />
              </MultiDataTrigger.Conditions>
              <MultiDataTrigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource ShowFloatingMessageStoryboard}" />
              </MultiDataTrigger.EnterActions>
              <MultiDataTrigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource HideFloatingMessageStoryboard}" />
              </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>
            <DataTrigger Value="False" Binding="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:TextBoxHelper.ClearTextButton)}">
              <Setter TargetName="PART_ContentHost" Property="Grid.ColumnSpan" Value="2" />
              <Setter TargetName="PART_Message" Property="Grid.ColumnSpan" Value="2" />
            </DataTrigger>
            <Trigger Property="TextBoxBase.IsReadOnly" Value="True">
              <Setter TargetName="PART_ClearText" Property="UIElement.IsEnabled" Value="False" />
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="True">
              <Setter TargetName="PART_FloatingMessage" Value="{DynamicResource AccentColorBrush}" Property="TextBlock.Foreground" />
              <Setter TargetName="PART_FloatingMessage" Property="UIElement.Opacity" Value="1" />
            </Trigger>
            <Trigger SourceName="PART_ClearText" Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="PART_ClearText" Value="{DynamicResource GrayBrush8}" Property="Control.Background" />
              <Setter TargetName="PART_ClearText" Value="{DynamicResource AccentColorBrush}" Property="Control.Foreground" />
            </Trigger>
            <Trigger SourceName="PART_ClearText" Property="ButtonBase.IsPressed" Value="True">
              <Setter TargetName="PART_ClearText" Value="{DynamicResource BlackBrush}" Property="Control.Background" />
              <Setter TargetName="PART_ClearText" Value="{DynamicResource WhiteBrush}" Property="Control.Foreground" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Controls:TextBoxHelper.HasText" Value="False" />
                <Condition Property="UIElement.IsFocused" Value="True" />
              </MultiTrigger.Conditions>
              <MultiTrigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource enterGotFocus}" />
              </MultiTrigger.EnterActions>
              <MultiTrigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource exitGotFocus}" />
              </MultiTrigger.ExitActions>
            </MultiTrigger>
            <Trigger Property="Controls:TextBoxHelper.HasText" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource enterHasText}" />
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource exitHasText}" />
              </Trigger.ExitActions>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MetroComboBoxDropDownToggleButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="ButtonBase.ClickMode" Value="Press" />
    <Setter Property="UIElement.Focusable" Value="False" />
    <Setter Property="Control.IsTabStop" Value="False" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid Name="ToggleButtonRootGrid" Background="{TemplateBinding Control.Background}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Name="TextColumn" Width="*" />
              <ColumnDefinition Name="ButtonColumn" Width="Auto" />
              <ColumnDefinition Name="ToggleButtonColumn" Width="Auto" />
            </Grid.ColumnDefinitions>
            <Button Name="PART_ClearText" Grid.Column="1" Width="{TemplateBinding Controls:TextBoxHelper.ButtonWidth}" Content="{TemplateBinding Controls:TextBoxHelper.ButtonContent}" ContentTemplate="{TemplateBinding Controls:TextBoxHelper.ButtonContentTemplate}" Focusable="False" FontFamily="{TemplateBinding Controls:TextBoxHelper.ButtonFontFamily}" FontSize="{TemplateBinding Controls:TextBoxHelper.ButtonFontSize}" Foreground="{TemplateBinding Control.Foreground}" IsTabStop="False" Style="{DynamicResource ChromelessButtonStyle}" Controls:TextBoxHelper.IsClearTextButtonBehaviorEnabled="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(Controls:TextBoxHelper.ClearTextButton), Mode=OneWay}" Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(Controls:TextBoxHelper.ClearTextButton), Converter={StaticResource BooleanToVisibilityConverter}}" />
            <Grid Name="BtnArrowBackground" Grid.Column="2" Width="{TemplateBinding Controls:TextBoxHelper.ButtonWidth}" Background="#00FFFFFF">
              <Path Name="BtnArrow" Width="8" Height="4" HorizontalAlignment="Center" Data="F1M301.14,-189.041L311.57,-189.041 306.355,-182.942 301.14,-189.041z" Fill="{DynamicResource GrayBrush1}" IsHitTestVisible="False" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Stretch="Uniform" />
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger SourceName="BtnArrowBackground" Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="BtnArrowBackground" Value="{DynamicResource GrayBrush5}" Property="Panel.Background" />
            </Trigger>
            <Trigger SourceName="PART_ClearText" Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="PART_ClearText" Value="{DynamicResource GrayBrush8}" Property="Control.Background" />
              <Setter TargetName="PART_ClearText" Value="{DynamicResource AccentColorBrush}" Property="Control.Foreground" />
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}">
              <Setter TargetName="BtnArrowBackground" Value="{DynamicResource GrayBrush3}" Property="Panel.Background" />
              <Setter TargetName="ToggleButtonRootGrid" Value="{DynamicResource GrayBrush7}" Property="Panel.Background" />
            </DataTrigger>
            <Trigger SourceName="PART_ClearText" Property="ButtonBase.IsPressed" Value="True">
              <Setter TargetName="PART_ClearText" Value="{DynamicResource BlackBrush}" Property="Control.Background" />
              <Setter TargetName="PART_ClearText" Value="{DynamicResource WhiteBrush}" Property="Control.Foreground" />
              <Setter TargetName="ToggleButtonRootGrid" Value="{DynamicResource GrayBrush7}" Property="Panel.Background" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MetroComboBox" TargetType="{x:Type ComboBox}">
    <Setter Property="Control.Background" Value="{DynamicResource ControlBackgroundBrush}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource TextBoxBorderBrush}" />
    <Setter Property="Control.BorderThickness" Value="{DynamicResource ComboBoxBorderThemeThickness}" />
    <Setter Property="Controls:ControlsHelper.FocusBorderBrush" Value="{DynamicResource ComboBoxMouseOverInnerBorderBrush}" />
    <Setter Property="Controls:ControlsHelper.MouseOverBorderBrush" Value="{DynamicResource TextBoxMouseOverBorderBrush}" />
    <Setter Property="Controls:TextBoxHelper.ButtonFontSize" Value="{DynamicResource ClearTextButtonFontSize}" />
    <Setter Property="Controls:TextBoxHelper.ButtonWidth" Value="24" />
    <Setter Property="Control.FontFamily" Value="{DynamicResource ContentFontFamily}" />
    <Setter Property="Control.FontSize" Value="{DynamicResource ContentFontSize}" />
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Left" />
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{DynamicResource MetroComboBoxItem}" />
    <Setter Property="FrameworkElement.MinHeight" Value="26" />
    <Setter Property="Control.Padding" Value="2" />
    <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="enterGotFocus">
              <DoubleAnimation Storyboard.TargetName="PART_WatermarkMessage" Storyboard.TargetProperty="Opacity" To=".2" Duration="0:0:0.2" />
            </Storyboard>
            <Storyboard x:Key="exitGotFocus">
              <DoubleAnimation Storyboard.TargetName="PART_WatermarkMessage" Storyboard.TargetProperty="Opacity" Duration="0:0:0.2" />
            </Storyboard>
            <Storyboard x:Key="enterHasText">
              <DoubleAnimation Storyboard.TargetName="PART_WatermarkMessage" Storyboard.TargetProperty="Opacity" From=".2" To="0" Duration="0:0:0.2" />
            </Storyboard>
            <Storyboard x:Key="exitHasText">
              <DoubleAnimation Storyboard.TargetName="PART_WatermarkMessage" Storyboard.TargetProperty="Opacity" Duration="0:0:0.2" />
            </Storyboard>
          </ControlTemplate.Resources>
          <Grid>
            <Border Name="Border" Grid.ColumnSpan="3" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay}" />
            <Grid Margin="{TemplateBinding Control.BorderThickness}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Name="TextColumn" Width="*" />
                <ColumnDefinition Name="ButtonColumn" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:TextBoxHelper.ButtonWidth), Mode=OneWay}" />
                <ColumnDefinition Name="ToggleButtonColumn" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:TextBoxHelper.ButtonWidth), Mode=OneWay}" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Name="ButtonRow" Height="*" />
              </Grid.RowDefinitions>
              <ToggleButton Name="PART_DropDownToggle" Grid.RowSpan="2" Grid.ColumnSpan="3" Margin="0" Padding="{TemplateBinding Control.Padding}" VerticalAlignment="Stretch" Controls:TextBoxHelper.ButtonContent="{TemplateBinding Controls:TextBoxHelper.ButtonContent}" Controls:TextBoxHelper.ButtonContentTemplate="{TemplateBinding Controls:TextBoxHelper.ButtonContentTemplate}" Controls:TextBoxHelper.ButtonFontFamily="{TemplateBinding Controls:TextBoxHelper.ButtonFontFamily}" Controls:TextBoxHelper.ButtonFontSize="{TemplateBinding Controls:TextBoxHelper.ButtonFontSize}" Controls:TextBoxHelper.ButtonWidth="{TemplateBinding Controls:TextBoxHelper.ButtonWidth}" Controls:TextBoxHelper.ClearTextButton="{TemplateBinding Controls:TextBoxHelper.ClearTextButton}" Background="#00FFFFFF" BorderThickness="0" Foreground="{TemplateBinding Control.Foreground}" KeyboardNavigation.IsTabStop="False" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Style="{DynamicResource MetroComboBoxDropDownToggleButtonStyle}" Controls:ControlsHelper.CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
              <TextBox Name="PART_EditableTextBox" Grid.Row="1" Grid.Column="0" Margin="0" Padding="{TemplateBinding Control.Padding}" HorizontalAlignment="Stretch" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Controls:TextBoxHelper.ButtonContent="{TemplateBinding Controls:TextBoxHelper.ButtonContent}" Controls:TextBoxHelper.ButtonContentTemplate="{TemplateBinding Controls:TextBoxHelper.ButtonContentTemplate}" Controls:TextBoxHelper.ButtonFontFamily="{TemplateBinding Controls:TextBoxHelper.ButtonFontFamily}" Controls:TextBoxHelper.ButtonFontSize="{TemplateBinding Controls:TextBoxHelper.ButtonFontSize}" Controls:TextBoxHelper.ButtonWidth="{TemplateBinding Controls:TextBoxHelper.ButtonWidth}" Controls:TextBoxHelper.HasText="{TemplateBinding Controls:TextBoxHelper.HasText}" Controls:TextBoxHelper.UseFloatingWatermark="{TemplateBinding Controls:TextBoxHelper.UseFloatingWatermark}" Controls:TextBoxHelper.Watermark="{TemplateBinding Controls:TextBoxHelper.Watermark}" Controls:TextBoxHelper.WatermarkAlignment="{TemplateBinding Controls:TextBoxHelper.WatermarkAlignment}" Controls:TextBoxHelper.WatermarkTrimming="{TemplateBinding Controls:TextBoxHelper.WatermarkTrimming}" BorderThickness="0" Focusable="True" FontFamily="{TemplateBinding Control.FontFamily}" FontSize="{TemplateBinding Control.FontSize}" Foreground="{TemplateBinding Control.Foreground}" IsReadOnly="{TemplateBinding ComboBox.IsReadOnly}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Style="{StaticResource EditableTextBoxStyle}" Visibility="Collapsed" Background="{x:Null}" CharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ComboBoxHelper.CharacterCasing), Mode=OneWay}" MaxLength="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ComboBoxHelper.MaxLength), Mode=OneWay}" />
              <TextBlock Name="PART_WatermarkMessage" Grid.Row="1" Grid.Column="0" Margin="5 0" Padding="{TemplateBinding Control.Padding}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" TextBlock.Foreground="{TemplateBinding Control.Foreground}" Style="{DynamicResource MahApps.Metro.Styles.MetroWatermarkTextBlock}" Text="{TemplateBinding Controls:TextBoxHelper.Watermark}" TextBlock.TextAlignment="{TemplateBinding Controls:TextBoxHelper.WatermarkAlignment}" TextTrimming="{TemplateBinding Controls:TextBoxHelper.WatermarkTrimming}" Visibility="Collapsed" />
              <ContentControl Name="PART_FloatingMessageContainer" Grid.Row="0" Grid.Column="0" Style="{DynamicResource FloatingMessageContainerStyle}">
                <ContentControl.Height>
                  <MultiBinding>
                    <MultiBinding.Converter>
                      <Converters:MathMultiplyConverter />
                    </MultiBinding.Converter>
                    <Binding ElementName="PART_FloatingMessage" Mode="OneWay" Path="ActualHeight" />
                    <Binding ElementName="PART_FloatingMessageContainer" Mode="OneWay" Path="Opacity" />
                  </MultiBinding>
                </ContentControl.Height>
                <TextBlock Name="PART_FloatingMessage" Margin="2 2 0 0" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" TextBlock.Foreground="{TemplateBinding Control.Foreground}" Style="{DynamicResource MetroAutoCollapsingTextBlock}" Text="{TemplateBinding Controls:TextBoxHelper.Watermark}" TextBlock.TextAlignment="{TemplateBinding Controls:TextBoxHelper.WatermarkAlignment}" TextTrimming="{TemplateBinding Controls:TextBoxHelper.WatermarkTrimming}">
                  <TextBlock.RenderTransform>
                    <TranslateTransform x:Name="FloatingMessageTransform">
                      <TranslateTransform.Y>
                        <MultiBinding>
                          <MultiBinding.Converter>
                            <Converters:MathSubtractConverter />
                          </MultiBinding.Converter>
                          <Binding ElementName="PART_FloatingMessage" Mode="OneWay" Path="ActualHeight" />
                          <Binding ElementName="PART_FloatingMessageContainer" Mode="OneWay" Path="ActualHeight" />
                        </MultiBinding>
                      </TranslateTransform.Y>
                    </TranslateTransform>
                  </TextBlock.RenderTransform>
                </TextBlock>
              </ContentControl>
              <Grid Name="ContentSite" Grid.Row="1" Grid.Column="0" Margin="4 0">
                <ContentPresenter Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Content="{TemplateBinding ComboBox.SelectionBoxItem}" ContentStringFormat="{TemplateBinding ComboBox.SelectionBoxItemStringFormat}" ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}" IsHitTestVisible="False" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
              </Grid>
            </Grid>
            <Border Name="DisabledVisualElement" Grid.ColumnSpan="3" Background="{DynamicResource ControlsDisabledBrush}" BorderBrush="{DynamicResource ControlsDisabledBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" IsHitTestVisible="False" Opacity="0.6" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Visibility="Collapsed" CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay}" />
            <Popup Name="PART_Popup" AllowsTransparency="True" Focusable="False" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
              <Grid MinWidth="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}" MaxHeight="{Binding MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}">
                <Border Name="PopupBorder" Height="Auto" HorizontalAlignment="Stretch" Background="{DynamicResource WhiteBrush}" BorderBrush="{DynamicResource ComboBoxPopupBorderBrush}" BorderThickness="{DynamicResource ComboBoxPopupBorderThemeThickness}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
                  <ScrollViewer Padding="{DynamicResource ComboBoxPopupBorderThemePadding}" BorderThickness="0">
                    <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" />
                  </ScrollViewer>
                </Border>
              </Grid>
            </Popup>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused" />
                <VisualState x:Name="Unfocused" />
                <VisualState x:Name="FocusedDropDown">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PopupBorder" Storyboard.TargetProperty="(UIElement.Visibility)" Duration="00:00:00">
                      <DiscreteObjectKeyFrame KeyTime="00:00:00">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
          <ControlTemplate.Triggers>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEditable}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ContextMenu, Converter={x:Static Converters:IsNullConverter.Instance}}" Value="False" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_EditableTextBox" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContextMenu}" Property="FrameworkElement.ContextMenu" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEditable}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=SelectedItem}" Value="{x:Null}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_WatermarkMessage" Property="UIElement.Visibility" Value="Visible" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=SelectedItem, Mode=OneWay, Converter={x:Static Converters:IsNullConverter.Instance}}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEditable}" Value="False" />
              </MultiDataTrigger.Conditions>
              <MultiDataTrigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource enterGotFocus}" />
              </MultiDataTrigger.EnterActions>
              <MultiDataTrigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource exitGotFocus}" />
              </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=SelectedItem, Mode=OneWay, Converter={x:Static Converters:IsNullConverter.Instance}}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEditable}" Value="False" />
              </MultiDataTrigger.Conditions>
              <MultiDataTrigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource enterHasText}" />
              </MultiDataTrigger.EnterActions>
              <MultiDataTrigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource exitHasText}" />
              </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsVisible, RelativeSource={RelativeSource Self}}" Value="True" />
                <Condition Binding="{Binding Path=(Controls:TextBoxHelper.UseFloatingWatermark), RelativeSource={RelativeSource Self}}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEditable}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=SelectedItem, Mode=OneWay, Converter={x:Static Converters:IsNullConverter.Instance}}" Value="False" />
              </MultiDataTrigger.Conditions>
              <MultiDataTrigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource ShowFloatingMessageStoryboard}" />
              </MultiDataTrigger.EnterActions>
              <MultiDataTrigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource HideFloatingMessageStoryboard}" />
              </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>
            <DataTrigger Value="False" Binding="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:TextBoxHelper.ClearTextButton)}">
              <Setter TargetName="ContentSite" Property="Grid.ColumnSpan" Value="2" />
              <Setter TargetName="PART_EditableTextBox" Property="Grid.ColumnSpan" Value="2" />
              <Setter TargetName="PART_WatermarkMessage" Property="Grid.ColumnSpan" Value="2" />
            </DataTrigger>
            <Trigger Property="ComboBox.IsEditable" Value="True">
              <Setter Property="Control.IsTabStop" Value="False" />
              <Setter TargetName="ContentSite" Property="UIElement.Visibility" Value="Hidden" />
              <Setter TargetName="PART_DropDownToggle" Value="{x:Null}" Property="Control.Background" />
              <Setter TargetName="PART_DropDownToggle" Property="UIElement.Focusable" Value="False" />
              <Setter TargetName="PART_EditableTextBox" Property="UIElement.Visibility" Value="Visible" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ComboBox.IsEditable" Value="False" />
                <Condition Property="UIElement.IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Value="{DynamicResource GrayBrush9}" Property="Control.Background" />
            </MultiTrigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="Border" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.MouseOverBorderBrush)}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="True">
              <Setter TargetName="Border" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.FocusBorderBrush)}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="True">
              <Setter TargetName="Border" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.FocusBorderBrush)}" Property="Border.BorderBrush" />
              <Setter TargetName="PART_FloatingMessage" Value="{DynamicResource AccentColorBrush}" Property="TextBlock.Foreground" />
              <Setter TargetName="PART_FloatingMessage" Property="UIElement.Opacity" Value="1" />
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="True">
              <Setter TargetName="Border" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.FocusBorderBrush)}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter TargetName="DisabledVisualElement" Property="UIElement.Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource ValidationErrorTemplate}" />
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
  </Style>
  <Style x:Key="VirtualisedMetroComboBox" BasedOn="{StaticResource MetroComboBox}" TargetType="{x:Type ComboBox}">
    <Setter Property="ItemsControl.ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <VirtualizingStackPanel IsItemsHost="True" IsVirtualizing="True" KeyboardNavigation.DirectionalNavigation="Contained" VirtualizationMode="Recycling" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
    <Style.Triggers>
      <Trigger Property="ItemsControl.IsGrouping" Value="True">
        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MetroComboBoxItem" TargetType="{x:Type ComboBoxItem}">
    <Setter Property="Control.Background" Value="{DynamicResource WhiteBrush}" />
    <Setter Property="Control.BorderThickness" Value="0" />
    <Setter Property="Controls:ItemHelper.ActiveSelectionBackgroundBrush" Value="{DynamicResource AccentColorBrush}" />
    <Setter Property="Controls:ItemHelper.ActiveSelectionForegroundBrush" Value="{DynamicResource AccentSelectedColorBrush}" />
    <Setter Property="Controls:ItemHelper.DisabledForegroundBrush" Value="{DynamicResource GrayNormalBrush}" />
    <Setter Property="Controls:ItemHelper.DisabledSelectedBackgroundBrush" Value="{DynamicResource GrayBrush7}" />
    <Setter Property="Controls:ItemHelper.DisabledSelectedForegroundBrush" Value="{DynamicResource AccentSelectedColorBrush}" />
    <Setter Property="Controls:ItemHelper.HoverBackgroundBrush" Value="{DynamicResource AccentColorBrush3}" />
    <Setter Property="Controls:ItemHelper.HoverSelectedBackgroundBrush" Value="{DynamicResource AccentColorBrush}" />
    <Setter Property="Controls:ItemHelper.SelectedBackgroundBrush" Value="{DynamicResource AccentColorBrush2}" />
    <Setter Property="Controls:ItemHelper.SelectedForegroundBrush" Value="{DynamicResource AccentSelectedColorBrush}" />
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Left" />
    <Setter Property="FrameworkElement.MinHeight" Value="22" />
    <Setter Property="Control.Padding" Value="2" />
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Grid Background="{TemplateBinding Control.Background}" RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}">
            <Border Name="Border" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
            <Grid Margin="{TemplateBinding Control.BorderThickness}">
              <ContentPresenter Name="contentPresenter" Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ListBoxItem.IsSelected" Value="True">
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.SelectedForegroundBrush), Mode=OneWay}" Property="Control.Foreground" />
              <Setter TargetName="Border" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ItemHelper.SelectedBackgroundBrush), Mode=OneWay}" Property="Border.Background" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
                <Condition Property="Selector.IsSelectionActive" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.ActiveSelectionForegroundBrush), Mode=OneWay}" Property="Control.Foreground" />
              <Setter TargetName="Border" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ItemHelper.ActiveSelectionBackgroundBrush), Mode=OneWay}" Property="Border.Background" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="True" />
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ItemHelper.HoverSelectedBackgroundBrush), Mode=OneWay}" Property="Border.Background" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="True" />
                <Condition Property="ListBoxItem.IsSelected" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ItemHelper.HoverBackgroundBrush), Mode=OneWay}" Property="Border.Background" />
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.DisabledForegroundBrush), Mode=OneWay}" Property="Control.Foreground" />
              <Setter TargetName="Border" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.DisabledBackgroundBrush), Mode=OneWay}" Property="Border.Background" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsEnabled" Value="False" />
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.DisabledSelectedForegroundBrush), Mode=OneWay}" Property="Control.Foreground" />
              <Setter TargetName="Border" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.DisabledSelectedBackgroundBrush), Mode=OneWay}" Property="Border.Background" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
    <Style.Triggers>
      <Trigger Property="UIElement.IsVisible" Value="True">
        <Setter Property="RenderOptions.ClearTypeHint" Value="{Binding Path=(RenderOptions.ClearTypeHint), FallbackValue=Auto, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
</ResourceDictionary>
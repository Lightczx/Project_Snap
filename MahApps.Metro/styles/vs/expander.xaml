<?xml version="1.0" encoding="utf-8"?>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:Controls="clr-namespace:MahApps.Metro.Controls" xmlns:Converters="clr-namespace:MahApps.Metro.Converters" xmlns:sys="clr-namespace:System;assembly=mscorlib">
  <Converters:ThicknessBindingConverter x:Key="ThicknessBindingConverter" />
  <Thickness x:Key="ExpanderHeaderThemePadding">2</Thickness>
  <sys:Double x:Key="ExpanderHeaderThemeFontSize">16</sys:Double>
  <sys:Double x:Key="ExpanderToggleButtonThemeSize">18</sys:Double>
  <Style x:Key="ExpanderBaseHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="#00FFFFFF" />
    <Setter Property="Control.BorderBrush" Value="#00FFFFFF" />
    <Setter Property="Control.BorderThickness" Value="0" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="FrameworkElement.Margin" Value="0" />
    <Setter Property="Control.Padding" Value="{DynamicResource ExpanderHeaderThemePadding}" />
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
  </Style>
  <Style x:Key="ExpanderRightHeaderStyle" BasedOn="{StaticResource ExpanderBaseHeaderStyle}" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.BorderThickness" Value="0 0 2 0" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
            <Grid Margin="{TemplateBinding Control.Padding}" Background="#00FFFFFF" SnapsToDevicePixels="False">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Grid Name="ArrowGrid" Width="{DynamicResource ExpanderToggleButtonThemeSize}" Height="{DynamicResource ExpanderToggleButtonThemeSize}" Margin="1" HorizontalAlignment="Center" VerticalAlignment="Center" Background="#00FFFFFF">
                <Grid.LayoutTransform>
                  <TransformGroup>
                    <TransformGroup.Children>
                      <TransformCollection>
                        <RotateTransform Angle="-90" />
                      </TransformCollection>
                    </TransformGroup.Children>
                  </TransformGroup>
                </Grid.LayoutTransform>
                <Path Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M1,1.5L4.5,5 8,1.5" IsHitTestVisible="False" SnapsToDevicePixels="False" Stroke="{DynamicResource BorderBrushNormal}" StrokeThickness="2" />
              </Grid>
              <Controls:ContentControlEx Grid.Row="1" Margin="0 4 0 0" HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.ContentCharacterCasing)}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="Arrow" Property="Path.Data" Value="M1,4.5L4.5,1 8,4.5" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="Arrow" Value="{DynamicResource Foreground}" Property="Shape.Stroke" />
              <Setter TargetName="ArrowGrid" Value="{DynamicResource BackgroundHighlighted}" Property="Panel.Background" />
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter TargetName="ArrowGrid" Value="{DynamicResource BackgroundSelected}" Property="Panel.Background" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.VerticalContentAlignment" Value="Stretch" />
  </Style>
  <Style x:Key="ExpanderUpHeaderStyle" BasedOn="{StaticResource ExpanderBaseHeaderStyle}" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.BorderThickness" Value="0 2 0 0" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}">
            <Grid Margin="{TemplateBinding Control.Padding}" Background="#00FFFFFF" SnapsToDevicePixels="False">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Controls:ContentControlEx Grid.Column="0" Margin="0 0 4 0" HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.ContentCharacterCasing)}" />
              <Grid Name="ArrowGrid" Grid.Column="1" Width="{DynamicResource ExpanderToggleButtonThemeSize}" Height="{DynamicResource ExpanderToggleButtonThemeSize}" Margin="1" HorizontalAlignment="Center" VerticalAlignment="Center" Background="#00FFFFFF">
                <Grid.LayoutTransform>
                  <TransformGroup>
                    <TransformGroup.Children>
                      <TransformCollection>
                        <RotateTransform Angle="180" />
                      </TransformCollection>
                    </TransformGroup.Children>
                  </TransformGroup>
                </Grid.LayoutTransform>
                <Path Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M1,1.5L4.5,5 8,1.5" SnapsToDevicePixels="False" Stroke="{DynamicResource BorderBrushNormal}" StrokeThickness="2" />
              </Grid>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="Arrow" Property="Path.Data" Value="M1,4.5L4.5,1 8,4.5" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="Arrow" Value="{DynamicResource Foreground}" Property="Shape.Stroke" />
              <Setter TargetName="ArrowGrid" Value="{DynamicResource BackgroundHighlighted}" Property="Panel.Background" />
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter TargetName="ArrowGrid" Value="{DynamicResource BackgroundSelected}" Property="Panel.Background" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
  </Style>
  <Style x:Key="ExpanderLeftHeaderStyle" BasedOn="{StaticResource ExpanderRightHeaderStyle}" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.BorderThickness" Value="2 0 0 0" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}">
            <Grid Margin="{TemplateBinding Control.Padding}" Background="#00FFFFFF" SnapsToDevicePixels="False">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Grid Name="ArrowGrid" Width="{DynamicResource ExpanderToggleButtonThemeSize}" Height="{DynamicResource ExpanderToggleButtonThemeSize}" Margin="1" HorizontalAlignment="Center" VerticalAlignment="Center" Background="#00FFFFFF">
                <Grid.LayoutTransform>
                  <TransformGroup>
                    <TransformGroup.Children>
                      <TransformCollection>
                        <RotateTransform Angle="90" />
                      </TransformCollection>
                    </TransformGroup.Children>
                  </TransformGroup>
                </Grid.LayoutTransform>
                <Path Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M1,1.5L4.5,5 8,1.5" SnapsToDevicePixels="False" Stroke="{DynamicResource BorderBrushNormal}" StrokeThickness="2" />
              </Grid>
              <Controls:ContentControlEx Grid.Row="1" Margin="0 4 0 0" HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.ContentCharacterCasing)}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="Arrow" Property="Path.Data" Value="M1,4.5L4.5,1 8,4.5" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="Arrow" Value="{DynamicResource Foreground}" Property="Shape.Stroke" />
              <Setter TargetName="ArrowGrid" Value="{DynamicResource BackgroundHighlighted}" Property="Panel.Background" />
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter TargetName="ArrowGrid" Value="{DynamicResource BackgroundSelected}" Property="Panel.Background" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderDownHeaderStyle" BasedOn="{StaticResource ExpanderUpHeaderStyle}" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.BorderThickness" Value="0 0 0 2" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}">
            <Grid Margin="{TemplateBinding Control.Padding}" Background="#00FFFFFF" SnapsToDevicePixels="False">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Controls:ContentControlEx Grid.Column="0" Margin="0 0 4 0" HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.ContentCharacterCasing)}" />
              <Grid Name="ArrowGrid" Grid.Column="1" Width="{DynamicResource ExpanderToggleButtonThemeSize}" Height="{DynamicResource ExpanderToggleButtonThemeSize}" Margin="1" HorizontalAlignment="Center" VerticalAlignment="Center" Background="#00FFFFFF">
                <Path Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M1,1.5L4.5,5 8,1.5" SnapsToDevicePixels="False" Stroke="{DynamicResource BorderBrushNormal}" StrokeThickness="2" />
              </Grid>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="Arrow" Property="Path.Data" Value="M1,4.5L4.5,1 8,4.5" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="Arrow" Value="{DynamicResource Foreground}" Property="Shape.Stroke" />
              <Setter TargetName="ArrowGrid" Value="{DynamicResource BackgroundHighlighted}" Property="Panel.Background" />
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter TargetName="ArrowGrid" Value="{DynamicResource BackgroundSelected}" Property="Panel.Background" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Storyboard x:Key="MetroExpanderExpandStoryboard">
    <DoubleAnimation Storyboard.TargetName="ExpandSite" Storyboard.TargetProperty="(UIElement.Opacity)" To="1" Duration="0:0:0.25" />
    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ExpandSite" Storyboard.TargetProperty="(UIElement.Visibility)">
      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
    </ObjectAnimationUsingKeyFrames>
  </Storyboard>
  <Storyboard x:Key="MetroExpanderCollapseStoryboard">
    <DoubleAnimation Storyboard.TargetName="ExpandSite" Storyboard.TargetProperty="(UIElement.Opacity)" To="0" Duration="0:0:0.25" />
    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ExpandSite" Storyboard.TargetProperty="(UIElement.Visibility)">
      <DiscreteObjectKeyFrame KeyTime="0:0:0.25" Value="{x:Static Visibility.Collapsed}" />
    </ObjectAnimationUsingKeyFrames>
  </Storyboard>
  <Style x:Key="StandardExpander" TargetType="{x:Type Expander}">
    <Setter Property="Control.Background" Value="{x:Null}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrushNormal}" />
    <Setter Property="Control.BorderThickness" Value="2" />
    <Setter Property="Controls:ControlsHelper.ContentCharacterCasing" Value="Normal" />
    <Setter Property="Controls:ControlsHelper.HeaderFontSize" Value="{DynamicResource ExpanderHeaderThemeFontSize}" />
    <Setter Property="Controls:ExpanderHelper.HeaderDownStyle" Value="{StaticResource ExpanderDownHeaderStyle}" />
    <Setter Property="Controls:ExpanderHelper.HeaderLeftStyle" Value="{StaticResource ExpanderLeftHeaderStyle}" />
    <Setter Property="Controls:ExpanderHelper.HeaderRightStyle" Value="{StaticResource ExpanderRightHeaderStyle}" />
    <Setter Property="Controls:ExpanderHelper.HeaderUpStyle" Value="{StaticResource ExpanderUpHeaderStyle}" />
    <Setter Property="Controls:GroupBoxHelper.HeaderForeground" Value="{DynamicResource Foreground}" />
    <Setter Property="Control.Foreground" Value="{DynamicResource Foreground}" />
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Expander}">
          <Grid>
            <Rectangle Name="DisabledVisualElement" Fill="{DynamicResource ControlsDisabledBrush}" IsHitTestVisible="False" Opacity="0" />
            <DockPanel Name="ExpanderRoot">
              <ToggleButton Name="ToggleSite" BorderBrush="{TemplateBinding Control.BorderBrush}" Content="{TemplateBinding HeaderedContentControl.Header}" ContentStringFormat="{TemplateBinding HeaderedContentControl.HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderedContentControl.HeaderTemplateSelector}" DockPanel.Dock="Top" FontSize="{TemplateBinding Controls:ControlsHelper.HeaderFontSize}" FontStretch="{TemplateBinding Controls:ControlsHelper.HeaderFontStretch}" FontWeight="{TemplateBinding Controls:ControlsHelper.HeaderFontWeight}" Foreground="{TemplateBinding Controls:GroupBoxHelper.HeaderForeground}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Controls:ControlsHelper.ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.ContentCharacterCasing)}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ExpanderHelper.HeaderDownStyle)}" />
              <Border Name="ExpandSite" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Background="#00FFFFFF" BorderBrush="{TemplateBinding Control.BorderBrush}" DockPanel.Dock="Bottom" Focusable="False" Opacity="0" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" UseLayoutRounding="True" Visibility="Collapsed" BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness, Converter={StaticResource ThicknessBindingConverter}, ConverterParameter={x:Static Converters:ThicknessSideType.Top}}">
                <ContentPresenter Margin="{TemplateBinding Control.Padding}" Content="{TemplateBinding ContentControl.Content}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" Cursor="{TemplateBinding FrameworkElement.Cursor}" UseLayoutRounding="False" />
              </Border>
            </DockPanel>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DisabledVisualElement" Storyboard.TargetProperty="Opacity">
                      <SplineDoubleKeyFrame KeyTime="0" Value="0.7" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpanderRoot" Storyboard.TargetProperty="(UIElement.Opacity)">
                      <EasingDoubleKeyFrame KeyTime="0" Value="0.3" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Expander.IsExpanded" Value="True">
              <Setter TargetName="ExpandSite" Property="UIElement.Visibility" Value="Visible" />
              <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource MetroExpanderExpandStoryboard}" />
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource MetroExpanderCollapseStoryboard}" />
              </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="Expander.ExpandDirection" Value="Right">
              <Setter TargetName="ExpandSite" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness, Converter={StaticResource ThicknessBindingConverter}, ConverterParameter={x:Static Converters:ThicknessSideType.Left}}" Property="Border.BorderThickness" />
              <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Right" />
              <Setter TargetName="ToggleSite" Property="DockPanel.Dock" Value="Left" />
              <Setter TargetName="ToggleSite" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ExpanderHelper.HeaderRightStyle)}" Property="FrameworkElement.Style" />
            </Trigger>
            <Trigger Property="Expander.ExpandDirection" Value="Up">
              <Setter TargetName="ExpandSite" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness, Converter={StaticResource ThicknessBindingConverter}, ConverterParameter={x:Static Converters:ThicknessSideType.Bottom}}" Property="Border.BorderThickness" />
              <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Top" />
              <Setter TargetName="ToggleSite" Property="DockPanel.Dock" Value="Bottom" />
              <Setter TargetName="ToggleSite" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ExpanderHelper.HeaderUpStyle)}" Property="FrameworkElement.Style" />
            </Trigger>
            <Trigger Property="Expander.ExpandDirection" Value="Left">
              <Setter TargetName="ExpandSite" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness, Converter={StaticResource ThicknessBindingConverter}, ConverterParameter={x:Static Converters:ThicknessSideType.Right}}" Property="Border.BorderThickness" />
              <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Left" />
              <Setter TargetName="ToggleSite" Property="DockPanel.Dock" Value="Right" />
              <Setter TargetName="ToggleSite" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ExpanderHelper.HeaderLeftStyle)}" Property="FrameworkElement.Style" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>
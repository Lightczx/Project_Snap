<?xml version="1.0" encoding="utf-8"?>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:Controls="clr-namespace:MahApps.Metro.Controls" xmlns:Converters="clr-namespace:MahApps.Metro.Converters">
  <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z" />
  <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="#00FFFFFF" />
    <Setter Property="UIElement.Focusable" Value="False" />
    <Setter Property="Control.Foreground" Value="{DynamicResource BlackBrush}" />
    <Setter Property="FrameworkElement.Height" Value="16" />
    <Setter Property="FrameworkElement.Margin" Value="1" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid Width="16" Height="16" Margin="{TemplateBinding FrameworkElement.Margin}" Background="#00FFFFFF">
            <Path Name="ExpandPath" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{StaticResource TreeArrow}" Fill="{TemplateBinding Control.Background}" Stroke="{TemplateBinding Control.Foreground}">
              <Path.RenderTransform>
                <RotateTransform Angle="135" CenterX="3" CenterY="3" />
              </Path.RenderTransform>
            </Path>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="ExpandPath" Value="{DynamicResource GrayBrush1}" Property="Shape.Fill" />
              <Setter TargetName="ExpandPath" Property="UIElement.RenderTransform">
                <Setter.Value>
                  <RotateTransform Angle="180" CenterX="3" CenterY="3" />
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter TargetName="ExpandPath" Value="{DynamicResource GrayBrush5}" Property="Shape.Stroke" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsEnabled" Value="False" />
                <Condition Property="ToggleButton.IsChecked" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="ExpandPath" Value="{DynamicResource GrayBrush5}" Property="Shape.Fill" />
              <Setter TargetName="ExpandPath" Value="{DynamicResource GrayBrush5}" Property="Shape.Stroke" />
            </MultiTrigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="ExpandPath" Value="{DynamicResource AccentColorBrush}" Property="Shape.Fill" />
              <Setter TargetName="ExpandPath" Value="{DynamicResource AccentColorBrush}" Property="Shape.Stroke" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="FrameworkElement.Width" Value="16" />
  </Style>
  <Style x:Key="TreeViewItemFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="0" Opacity="0" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeDashArray="1 2" StrokeThickness="5" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Converters:TreeViewMarginConverter x:Key="LengthConverter" Length="12" />
  <Style x:Key="MetroTreeViewItem" TargetType="{x:Type TreeViewItem}">
    <Setter Property="Control.Background" Value="{DynamicResource WhiteBrush}" />
    <Setter Property="Controls:ItemHelper.ActiveSelectionBackgroundBrush" Value="{DynamicResource AccentColorBrush}" />
    <Setter Property="Controls:ItemHelper.ActiveSelectionForegroundBrush" Value="{DynamicResource AccentSelectedColorBrush}" />
    <Setter Property="Controls:ItemHelper.DisabledForegroundBrush" Value="{DynamicResource GrayNormalBrush}" />
    <Setter Property="Controls:ItemHelper.DisabledSelectedBackgroundBrush" Value="{DynamicResource GrayBrush7}" />
    <Setter Property="Controls:ItemHelper.DisabledSelectedForegroundBrush" Value="{DynamicResource AccentSelectedColorBrush}" />
    <Setter Property="Controls:ItemHelper.HoverBackgroundBrush" Value="{DynamicResource AccentColorBrush3}" />
    <Setter Property="Controls:ItemHelper.HoverSelectedBackgroundBrush" Value="{DynamicResource AccentColorBrush}" />
    <Setter Property="Controls:ItemHelper.SelectedBackgroundBrush" Value="{DynamicResource AccentColorBrush2}" />
    <Setter Property="Controls:ItemHelper.SelectedForegroundBrush" Value="{DynamicResource AccentSelectedColorBrush}" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Control.HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, Mode=OneWay, FallbackValue=Stretch, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="FrameworkElement.MinHeight" Value="25" />
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeViewItem}">
          <StackPanel>
            <Border Name="Border" MinHeight="{TemplateBinding FrameworkElement.MinHeight}" Padding="{TemplateBinding Control.Padding}" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
              <Grid VerticalAlignment="Stretch" Background="#00FFFFFF" Margin="{Binding Converter={StaticResource LengthConverter}, RelativeSource={x:Static RelativeSource.TemplatedParent}}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" MinWidth="19" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <ToggleButton Name="Expander" ClickMode="Press" Style="{StaticResource ExpandCollapseToggleStyle}" IsChecked="{Binding Path=IsExpanded, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=TwoWay}" />
                <ContentPresenter Name="PART_Header" Grid.Column="1" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" ContentSource="Header" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
              </Grid>
            </Border>
            <ItemsPresenter Name="ItemsHost" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
          </StackPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="TreeViewItem.IsExpanded" Value="False">
              <Setter TargetName="ItemsHost" Property="UIElement.Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="ItemsControl.HasItems" Value="False">
              <Setter TargetName="Expander" Property="UIElement.Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="TreeViewItem.IsSelected" Value="True">
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.SelectedForegroundBrush), Mode=OneWay}" Property="Control.Foreground" />
              <Setter TargetName="Border" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ItemHelper.SelectedBackgroundBrush), Mode=OneWay}" Property="Border.Background" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="TreeViewItem.IsSelected" Value="True" />
                <Condition Property="Selector.IsSelectionActive" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.ActiveSelectionForegroundBrush), Mode=OneWay}" Property="Control.Foreground" />
              <Setter TargetName="Border" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ItemHelper.ActiveSelectionBackgroundBrush), Mode=OneWay}" Property="Border.Background" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="Border" Property="UIElement.IsMouseOver" Value="True" />
                <Condition Property="TreeViewItem.IsSelected" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ItemHelper.HoverSelectedBackgroundBrush), Mode=OneWay}" Property="Border.Background" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="Border" Property="UIElement.IsMouseOver" Value="True" />
                <Condition Property="TreeViewItem.IsSelected" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ItemHelper.HoverBackgroundBrush), Mode=OneWay}" Property="Border.Background" />
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.DisabledForegroundBrush), Mode=OneWay}" Property="Control.Foreground" />
              <Setter TargetName="Border" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.DisabledBackgroundBrush), Mode=OneWay}" Property="Border.Background" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsEnabled" Value="False" />
                <Condition Property="TreeViewItem.IsSelected" Value="True" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.DisabledSelectedForegroundBrush), Mode=OneWay}" Property="Control.Foreground" />
                <Setter TargetName="Border" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.DisabledSelectedBackgroundBrush), Mode=OneWay}" Property="Border.Background" />
              </MultiTrigger.Setters>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.VerticalContentAlignment" Value="{Binding VerticalContentAlignment, Mode=OneWay, FallbackValue=Center, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Style.Triggers>
      <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
        <Setter Property="ItemsControl.ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel />
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MetroTreeView" TargetType="{x:Type TreeView}">
    <Setter Property="Control.Background" Value="{DynamicResource WhiteBrush}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BlackBrush}" />
    <Setter Property="Control.BorderThickness" Value="0" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Control.Padding" Value="1" />
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeView}">
          <Border Name="Border" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
            <ScrollViewer Name="TreeViewScrollViewer" Padding="{TemplateBinding Control.Padding}" ScrollViewer.CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" Focusable="False" ScrollViewer.HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" ScrollViewer.VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
              <ItemsPresenter />
            </ScrollViewer>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
    <Style.Triggers>
      <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
        <Setter Property="ItemsControl.ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel />
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="Control.BorderBrush" Value="{DynamicResource GrayBrush9}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="VirtualisedMetroTreeView" BasedOn="{StaticResource MetroTreeView}" TargetType="{x:Type TreeView}">
    <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
    <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling" />
  </Style>
</ResourceDictionary>